<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pn.dao.BlogMapper">
<insert id="addBlog" parameterType="Blog" >
    insert into mybatis.blog (id,title,author,create_time,views)
    values (#{id}, #{title}, #{author}, #{createTime}, #{views})
</insert>
    <sql id="if-title-author" >
        <if test="title != null">
            title = #{title}
        </if>
         <if test="author != null">
        and author = #{author}
    </if>
    </sql>
<!--    使⽤SQL标签抽取公共的部分 在需要使⽤的地⽅使⽤Include标签引⽤即可
最好基于单表来定义SQL⽚段！
不要存在where标签
-->
    <select id="queryBlogSql" parameterType="map" resultType="Blog">
        select * from mybatis.blog
        <where>
            <include refid="if-title-author"></include>
        </where>

    </select>
    <select id="queryBlogIF" parameterType="map" resultType="Blog">
            select * from mybatis.blog where 1=1
        <if test="title != null">
            title = #{title}
        </if>
        <if test="author != null">
            and author = #{author}
        </if>

    </select>
<!-- 加上where标签自动去除and-->
<!--    <select id="queryBlogIF" parameterType="map" resultType="Blog">-->
<!--    select * from mybatis.blog-->
<!--    <where> -->
<!--        <if test="title != null">-->
<!--        title = #{title}-->
<!--    </if> -->
<!--     <if test="author != null">-->
<!--        and author = #{author}-->
<!--    </if>-->
<!--    </where>-->
<!--    </select>-->
<!--            where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。
而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。
-->
<select id="queryBlogChoose" parameterType="map" resultType="Blog">
    select * from mybatis.blog
        <where>
     <choose>
        <when test="title != null">
        title = #{title}
    </when>
     <when test="author != null">
        and author = #{author}
    </when>
     <otherwise>
        and views = #{views}
    </otherwise>
    </choose>
    </where>

</select>
    <update id="updateBlog" parameterType="map">
        update mybatis.blog
        <set>
            <if test="title != null">
            title = #{title},
            </if>
            <if test="author != null">
            author = #{author},
            </if>
        </set>
        where id = #{id}
    </update>


    <!--
select * from mybatis.blog where 1=1 and (id=1 or id =
2 or id=3)
我们现在传递⼀个万能的map ， 这map中可以存在⼀个集合！
从传来的ids集合遍历每一项id
-->
    <select id="queryBlogForeach" parameterType="map"
            resultType="blog">
        select * from mybatis.blog
        <where>
            <foreach collection="ids" item="Tid" open="and ("
                     close=")" separator="or">
                id = #{Tid}
            </foreach>
        </where>
    </select>
</mapper>
